server {
    listen 80;
    listen [::]:80;
    server_name learn.sukoonsphere.org;

    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;

    # Root directory for the frontend
    root /var/www/educasheer/client;
    index index.html;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;

    # Brotli compression is commented out as the module is not installed
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;

    # Cache static assets with query parameter support for cache busting
    location ~* \.(jpg|jpeg|png|webp|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # If there's a version parameter, cache for a long time
        if ($arg_v) {
            expires max;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }
        # Otherwise use a shorter cache time
        if (!$arg_v) {
            expires 1d;
            add_header Cache-Control "public, max-age=86400, must-revalidate";
        }
        try_files $uri =404;
    }

    # CSS and JS files with special cache control
    location ~* \.(css|js)$ {
        # If there's a version parameter, cache for a long time
        if ($arg_v) {
            expires max;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }
        # Otherwise use a shorter cache time and require revalidation
        if (!$arg_v) {
            expires 1h;
            add_header Cache-Control "public, max-age=3600, must-revalidate";
        }
        try_files $uri =404;
    }

    # Service worker needs special cache headers to prevent caching
    location = /service-worker.js {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        try_files $uri =404;
    }

    # HTML files should not be cached
    location ~* \.html$ {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        try_files $uri =404;
    }

    # API proxy with no caching
    location /api/ {
        proxy_pass http://localhost:5000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;

        # Ensure API responses are never cached
        proxy_cache_bypass $http_upgrade $http_pragma $http_authorization $http_cache_control;
        proxy_no_cache 1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;

        # Forward client IP and protocol
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # For SPA routing - serve index.html for all non-file routes with no caching
    location / {
        # Prevent caching of HTML content
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;

        try_files $uri $uri/ /index.html;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# SSL configuration
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name learn.sukoonsphere.org;

    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/learn.sukoonsphere.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/learn.sukoonsphere.org/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    # Root directory for the frontend
    root /var/www/educasheer/client;
    index index.html;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;

    # Cache static assets with query parameter support for cache busting
    location ~* \.(jpg|jpeg|png|webp|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # If there's a version parameter, cache for a long time
        if ($arg_v) {
            expires max;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }
        # Otherwise use a shorter cache time
        if (!$arg_v) {
            expires 1d;
            add_header Cache-Control "public, max-age=86400, must-revalidate";
        }
        try_files $uri =404;
    }

    # CSS and JS files with special cache control
    location ~* \.(css|js)$ {
        # If there's a version parameter, cache for a long time
        if ($arg_v) {
            expires max;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }
        # Otherwise use a shorter cache time and require revalidation
        if (!$arg_v) {
            expires 1h;
            add_header Cache-Control "public, max-age=3600, must-revalidate";
        }
        try_files $uri =404;
    }

    # Service worker needs special cache headers to prevent caching
    location = /service-worker.js {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        try_files $uri =404;
    }

    # HTML files should not be cached
    location ~* \.html$ {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        try_files $uri =404;
    }

    # API proxy with no caching
    location /api/ {
        proxy_pass http://localhost:5000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;

        # Ensure API responses are never cached
        proxy_cache_bypass $http_upgrade $http_pragma $http_authorization $http_cache_control;
        proxy_no_cache 1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;

        # Forward client IP and protocol
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # For SPA routing - serve index.html for all non-file routes with no caching
    location / {
        # Prevent caching of HTML content
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;

        try_files $uri $uri/ /index.html;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
